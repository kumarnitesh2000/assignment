swagger: '2.0'
info:
  title: Report Section Service
  description: API for assigning reports to moderators.
  version: 1.0.0

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the health status of the service.
      responses:
        '200':
          description: Health check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "report section service is running 1.0.0 :: stage -> development"
                  status:
                    type: integer
                    example: 200
  /moderators:
    post:
      summary: register moderator
      parameters:
        - $ref: '#/parameters/moderatorBody'
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      summary: get all moderators
      parameters:
        - name: page
          in: query
          description: The page number to retrieve
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: The number of tasks per page
          required: false
          schema:
            type: integer
            default: 10
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /moderators/{moderatorId}:
    put:
      summary: Update a moderator by ID
      parameters:
        - name: moderatorId
          in: path
          required: true
          description: The ID of the moderator to update
          schema:
            type: string
        - name: body
          in: body
          required: true
          description: Key-value pairs to update in the moderator entry
          schema:
            type: object
            properties:
              weight:
                type: number
                format: float
                description: Weight of the moderator
              absent:
                type: boolean
                description: Absence status of the moderator
              preferred_language:
                type: string
                description: Preferred language of the moderator
              performance_score:
                type: number
                format: float
                description: Performance score of the moderator
              shift_timing:
                type: string
                description: Shift timing of the moderator
              preferred_city:
                type: string
                description: Preferred city of the moderator
            required:
              - weight
              - absent
              - preferred_language
              - performance_score
              - shift_timing
              - preferred_city
      produces:
        - application/json
      responses:
        200:
          description: OK
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /jobs:
    post:
      summary: create job
      parameters:
        - $ref: '#/parameters/jobBody'
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      summary: get all jobs
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /seekers:
    post:
      summary: register job seekers
      parameters:
        - $ref: '#/parameters/jobSeekersBody'
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      summary: get all job seekers
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  
  /tasks:
    get:
      summary: get all tasks assigned to moderators
      parameters:
        - name: page
          in: query
          description: The page number to retrieve
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: The number of tasks per page
          required: false
          schema:
            type: integer
            default: 10
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /report:
    post:
      summary: register job seekers
      parameters:
        - $ref: '#/parameters/reportBody'
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /strategy:
    patch:
      summary: change strategy of assignment
      parameters:
        - $ref: '#/parameters/strategyBody'
      produces:
        - application/json
      responses:
        200: 
          description: OK
        default:  
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
parameters:
  moderatorBody: &moderatorBody
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/moderatorBody'
  strategyBody: &strategyBody
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/strategyBody'
  jobBody: &jobBody
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/jobBody'
  jobSeekersBody: &jobSeekersBody
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/jobSeekersBody'
  reportBody: &reportBody
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/reportBody'
definitions: 
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  jobBody:
    required:
      - job_name
      - city
    properties:
      job_name:
        type: string
        example: "software developer"
      city:
        type: string
        example: "meerut"
  strategyBody:
    required:
      - strategy
    properties:
      strategy:
        type: string
        example: "performance_based"
  jobSeekersBody:
    required:
      - name
      - email
    properties:
      name:
        type: string
        example: "Nitesh"
      email:
        type: string
        example: "kumarnit@mail.com"
  reportBody:
    required:
      - seeker_id
      - job_id
      - reason
    properties:
      seeker_id:
        type: string
        example: "66a13045209739d6fa21c33f"
      job_id: 
        type: string
        example: "66a12eb25ecf2752d416c5a3"
      reason: 
        type: string
        example: "Ask For Money"
  moderatorBody:
    required:
      - name
      - city
    properties:
      name:
        type: string
        example: "Nitesh"
      email:
        type: string
        example: "kumarnit@mail.com"
      preferred_city:
        type: string
        example: "delhi"
      preferred_language:
        type: string
        example: "english"
      departments:
        type: array
        example: ["engineering","management","home_science"]
        items:
          type: string
      shift_timing:
        type: string
        example: "day"
      
